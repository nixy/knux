#!/usr/bin/env bash
#
# A CLI interface for the Nix package management system.
#
# Nixy tries to wrap around sane defaults for the existing Nix commands in an
# attempt to provide a familiar package management interface for new users.

# Enable extended glob patterns
shopt -s extglob

help()
{
  cat << EOF
usage: nixy <command> [options]

These are some common commands for the Nix package management system:

Search for packages
  list    Search installed package names using basic regular expressions
  search  Search available package names using basic regular expressions

Installing packages
  install  Install packages into the nix store and add them to the current profile
  remove   Remove packages from the current profile

Updating packages
  update   Update list of available packages
  upgrade  Install upgraded packages in to the nix store and replace them to the current profile

EOF
}

# Search for packages using regular expressions.
# Arguments:
#   A list of arguments to pass to $(nix-env -q).
# Returns:
#   The unmodified output of nix-env -q "$@".
query()
{
  #TODO(nixy): edolstras outline has a more formatted list, see if its practical
  nix-env -qa "$@"
}

# Installs packages to the Nix store and adds them to the current profile.
# Arguments:
#   A list of arguments to pass to $(nix-env -i).
# Returns:
#   The unmodified output of nix-env -Qi "$@".
install()
{ 
  # {- Rule of least surprise -}
  # If the user doesn't provide any packages to install, do nothing.
  if [ "$#" -gt 0 ]; then
    nix-env -Qi "$@"
  fi
}

# {- remove -}
# Removes a package from the current profile.
# Arguments:
#   A list of arguments to pass to $(nix-env -i).
# Returns:
#   The unmodified output of nix-env -e "$@".
remove()
{
  nix-env -e "$@"
  # TODO(nixy): Make it print an error message if the package to be removed isn't
  # in the current profiles
}

# {- update -}
# Updates the list of available packages.
# Arguments:
#   A list of arguments to pass to $(nix-channel --update).
# Returns:
#   The unmodified output of nix-env -e "$@".
update()
{
  # {- Rule of least surprise -}
  # If the user doesn't provide channels to update, update all channels.
  if [ "$#" -gt 0 ]; then
    nix-channel --update "$@"
  else
    nix-channel --update
  fi
}

# {- upgrade -}
# Installs an upgraded package into the Nix store and replaces the previous
# package in the current Nix profile.
# Arguments:
#   A list of arguments to pass to $(nix-env -Qu).
# Returns:
#   The unmodified output of nix-env -Qu "$@".
upgrade()
{
  # {- Rule of least surprise -}
  # If the user doesn't provide packages to upgrade, then update all packages
  if [ "$#" -gt 0 ]; then
    nix-env -Qu "$@"
  else
    nix-env -Qu
  fi
}

main()
{
  if [ $# -eq 0 ]; then
    help
  else
    cmd="$1"; shift

    case "$cmd" in
      list) query --installed "$@";;
      search) query "$@";;

      install) install "$@";;
      remove) remove "$@";;

      update) update "$@";;
      upgrade) upgrade "$@";;

      -h|--help|help) help;;

      *) echo -en '\e[1;31merror:\e[0m '; echo "invalid operation $cmd"
    esac
  fi
}

main "$@"
